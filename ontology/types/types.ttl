# imports: https://ontology.unifiedcyberontology.org/uco/core
# imports: https://ontology.unifiedcyberontology.org/uco/vocabulary

@prefix core: <https://ontology.unifiedcyberontology.org/uco/core/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix observable: <https://ontology.unifiedcyberontology.org/uco/observable/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix types: <https://ontology.unifiedcyberontology.org/uco/types/> .
@prefix vocabulary: <https://ontology.unifiedcyberontology.org/uco/vocabulary/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<https://ontology.unifiedcyberontology.org/uco/types>
	a owl:Ontology ;
	rdfs:label "uco-types"@en ;
	owl:imports
		<https://ontology.unifiedcyberontology.org/uco/core> ,
		<https://ontology.unifiedcyberontology.org/uco/vocabulary>
		;
	.

dcterms:FileFormat
	a owl:Class ;
	rdfs:comment "UCO extends dcterms:FileFormat to be an OWL Class in addition to its native definition of an RDF Class."@en ;
	.

types:ControlledDictionary
	a
		owl:Class ,
		sh:NodeShape
		;
	rdfs:label "ControlledDictionary"@en ;
	rdfs:comment "A controlled dictionary is a list of (term/key, value) pairs where each term/key exists no more than once and is constrained to an explicitly defined set of values."@en ;
	sh:property [
		sh:class types:ControlledDictionaryEntry ;
		sh:minCount "1"^^xsd:integer ;
		sh:nodeKind sh:BlankNodeOrIRI ;
		sh:path types:entry ;
	] ;
	sh:targetClass types:ControlledDictionary ;
	.

types:ControlledDictionaryEntry
	a
		owl:Class ,
		sh:NodeShape
		;
	rdfs:label "ControlledDictionaryEntry"@en ;
	rdfs:comment "A controlled dictionary entry is a single (term/key, value) pair where the term/key is constrained to an explicitly defined set of values."@en ;
	sh:property
		[
			sh:datatype xsd:string ;
			sh:maxCount "1"^^xsd:integer ;
			sh:minCount "1"^^xsd:integer ;
			sh:nodeKind sh:Literal ;
			sh:path types:key ;
		] ,
		[
			sh:datatype xsd:string ;
			sh:maxCount "1"^^xsd:integer ;
			sh:minCount "1"^^xsd:integer ;
			sh:nodeKind sh:Literal ;
			sh:path types:value ;
		]
		;
	sh:targetClass types:ControlledDictionaryEntry ;
	.

types:Dictionary
	a
		owl:Class ,
		sh:NodeShape
		;
	rdfs:label "Dictionary"@en ;
	rdfs:comment "A dictionary is list of (term/key, value) pairs with each term/key existing no more than once."@en ;
	sh:property [
		sh:class types:DictionaryEntry ;
		sh:minCount "1"^^xsd:integer ;
		sh:nodeKind sh:BlankNodeOrIRI ;
		sh:path types:entry ;
	] ;
	sh:targetClass types:Dictionary ;
	.

types:DictionaryEntry
	a
		owl:Class ,
		sh:NodeShape
		;
	rdfs:label "DictionaryEntry"@en ;
	rdfs:comment "A dictionary entry is a single (term/key, value) pair."@en ;
	sh:property
		[
			sh:datatype xsd:string ;
			sh:maxCount "1"^^xsd:integer ;
			sh:minCount "1"^^xsd:integer ;
			sh:nodeKind sh:Literal ;
			sh:path types:key ;
		] ,
		[
			sh:datatype xsd:string ;
			sh:maxCount "1"^^xsd:integer ;
			sh:minCount "1"^^xsd:integer ;
			sh:nodeKind sh:Literal ;
			sh:path types:value ;
		]
		;
	sh:targetClass types:DictionaryEntry ;
	.

types:Hash
	a
		owl:Class ,
		sh:NodeShape
		;
	rdfs:label "Hash"@en ;
	rdfs:comment "A hash is a grouping of characteristics unique to the result of applying a mathematical algorithm that maps data of arbitrary size to a bit string (the 'hash') and is a one-way function, that is, a function which is practically infeasible to invert. This is commonly used for integrity checking of data. [based on https://en.wikipedia.org/wiki/Cryptographic_hash_function]"@en ;
	sh:property
		[
			sh:datatype xsd:hexBinary ;
			sh:maxCount "1"^^xsd:integer ;
			sh:minCount "1"^^xsd:integer ;
			sh:nodeKind sh:Literal ;
			sh:path types:hashValue ;
		] ,
		[
			sh:datatype vocabulary:HashNameVocab ;
			sh:message "Value is outside the default vocabulary HashNameVocab." ;
			sh:path types:hashMethod ;
			sh:severity sh:Info ;
		] ,
		[
			sh:maxCount "1"^^xsd:integer ;
			sh:minCount "1"^^xsd:integer ;
			sh:nodeKind sh:Literal ;
			sh:or (
				[
					sh:datatype vocabulary:HashNameVocab ;
				]
				[
					sh:datatype xsd:string ;
				]
			) ;
			sh:path types:hashMethod ;
		] ,
		[
			sh:message "Value is not member of the vocabulary HashNameVocab." ;
			sh:or (
				[
					sh:datatype vocabulary:HashNameVocab ;
					sh:in vocabulary:HashNameVocab-members ;
				]
				[
					sh:datatype xsd:string ;
				]
			) ;
			sh:path types:hashMethod ;
		]
		;
	sh:targetClass types:Hash ;
	.

types:IANAMediaType
	a owl:Class ;
	rdfs:subClassOf types:MIMEFormat ;
	rdfs:label "IANAMediaType"@en ;
	owl:disjointWith types:NonIANAMediaType ;
	.

types:Identifier
	a rdfs:Datatype ;
	rdfs:comment "An identifier is a string conformant to the specified UUID-based format for UCO object identifiers."@en ;
	.

types:MIMEFormat
	a owl:Class ;
	rdfs:subClassOf
		dcterms:FileFormat ,
		core:TaxonomicConcept
		;
	rdfs:label "MIMEFormat"@en ;
	rdfs:comment "This class should be considered an intermediary, 'abstract' class, and should not have individuals defined that are not a member of one of its subclasses.  This class has two purposes.  First, to encode for interoperability with existing frameworks, without relying on RDFS inference, that a UCO MIMEFormat individual is both a SKOS Concept (via core:TaxonomicConcept) and Dublin Core Terms FileFormat.  Second, to guarantee a concept to be used as a UCO MIME type has exactly one skos:notation.  Note that strict SHACL enforcement of the skos:notation presence is not within the UCO Types ontology, but is instead a part of the shapes provided by the UCO MIME Taxonomy.  The warning about skos:notation in the Observable namespace is deactivated on importing the taxonomy's shapes."@en ;
	rdfs:seeAlso observable:mimeType-notation ;
	.

types:NativeFormatString
	a rdfs:Datatype ;
	rdfs:comment "Specifies data in its native format of some external language. The data may be encoded in Base64 per [RFC4648]. Data encoded in Base64 must be denoted as such using the encoded property."@en ;
	.

types:NonIANAMediaType
	a owl:Class ;
	rdfs:subClassOf types:MIMEFormat ;
	rdfs:label "NonIANAMediaType"@en ;
	owl:disjointWith types:IANAMediaType ;
	.

types:StructuredText
	a rdfs:Datatype ;
	rdfs:comment "Expresses string-based data in some information structuring format (e.g., HTML5)."@en ;
	.

types:entry
	a owl:ObjectProperty ;
	rdfs:label "entry"@en ;
	rdfs:comment "A dictionary entry."@en ;
	rdfs:range [
		a rdfs:Datatype ;
		owl:unionOf (
			types:ControlledDictionaryEntry
			types:DictionaryEntry
		) ;
	] ;
	.

types:hashMethod
	a owl:DatatypeProperty ;
	rdfs:label "hashMethod"@en ;
	rdfs:comment "A particular cryptographic hashing method (e.g., MD5)."@en ;
	rdfs:range [
		a rdfs:Datatype ;
		owl:unionOf (
			vocabulary:HashNameVocab
			xsd:string
		) ;
	] ;
	.

types:hashValue
	a owl:DatatypeProperty ;
	rdfs:label "hashValue"@en ;
	rdfs:comment "A cryptographic hash value."@en ;
	rdfs:range xsd:hexBinary ;
	.

types:key
	a owl:DatatypeProperty ;
	rdfs:label "key"@en ;
	rdfs:comment "A key property of a single dictionary entry."@en ;
	rdfs:range xsd:string ;
	.

types:value
	a owl:DatatypeProperty ;
	rdfs:label "value"@en ;
	rdfs:comment "A specific property value."@en ;
	rdfs:range xsd:string ;
	.

